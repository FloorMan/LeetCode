class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        Set<Character> charAlr = new HashSet<>();
        

        for (int j = 0; j < 9; j++)
        {
            for (int i = 0; i < 9; i++)
            {
                if (Character.compare(board[j][i], '.') != 0 && charAlr.contains(board[j][i]))
                    return false;
                charAlr.add(board[j][i]);
            }
            charAlr.clear();
        }

        for (int j = 0; j < 9; j++)
        {
            for (int i = 0; i < 9; i++)
            {
                if (Character.compare(board[i][j],'.') != 0 && charAlr.contains(board[i][j]))
                    return false;
                charAlr.add(board[i][j]);
            }
            charAlr.clear();
        }


        Set<Character> squareSet = new HashSet<>();

        for (int n = 0; n < 3; n++)
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    for (int k = 0; k < 3; k++)
                    {
                        char blockNum = board[j + 3 * n][k + 3 * i];
                        if (Character.compare(blockNum,'.') != 0 && squareSet.contains(blockNum))
                            return false;
                        squareSet.add(blockNum);
                    }
                }
                squareSet.clear();
            }
        }
    return true;
    }
}
